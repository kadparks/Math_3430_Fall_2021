# -*- coding: utf-8 -*-
"""
Created on Tue Nov 30 01:00:25 2021

@author: Kadeem
"""

import QR
import pytest

test_vector_01 = [1, 2, 4]
test_vector_02 = [3, 1, 2]
test_vector_03 = [4, 2, 1]
test_vector_04 = [5, 3, 2]
test_scalar_01 = 2
test_scalar_02 = 1
test_matrix_01 = [[1,4,7],[2,5,8],[3,6,9]]
test_matrix_02 = [[1,3,2],[3,5,3],[2,7,4]]
test_matrix_03 = [[1,4],[2,5],[3,6]]
test_matrix_04 = [[7,9,11],[8,10,12]]
test_matrix_05 = [[2,3],[1,2],[7,4]]

def test_stable_gram():
    assert QR.stable_gram(test_matrix_01) == ([[0.12309149097933272, 0.4923659639173309, 0.8616404368553291], [0.904534033733291, 0.3015113445777643, -0.30151134457776235], [0.0, 1.0, 0.0]],
                                              [[8.12403840463596, 0, 0], [9.601136296387953, 0.9045340337332909, 0], [11.078234188139945, 1.8090680674665818, 1.1102230246251565e-16]])
    assert QR.stable_gram(test_matrix_02) == ([[0.2672612419124244, 0.8017837257372732, 0.5345224838248488], [0.9434563530497264, -0.10482848367219212, -0.3144854510165757], [-0.1961161351381837, 0.5883484054145532, -0.7844645405527355]],
                                              [[3.7416573867739413, 0, 0], [6.4142698058981855, 1.362770287738494, 0], [8.285098499285155, -0.10482848367219177, 0.5883484054145519]])

def test_orthonormal_vectors():
    assert QR.orthonormal_vectors(test_matrix_01) == [[0.12309149097933272, 0.4923659639173309, 0.8616404368553291], [0.904534033733291, 0.3015113445777643, -0.30151134457776235], [0.0, 1.0, 0.0]]
    assert QR.orthonormal_vectors(test_matrix_02) == [[0.2672612419124244, 0.8017837257372732, 0.5345224838248488], [0.9434563530497264, -0.10482848367219212, -0.3144854510165757], [-0.1961161351381837, 0.5883484054145532, -0.7844645405527355]]
    
def test_conjugate_transpose():
    assert QR.conjugate_transpose(test_matrix_03) == [[(1+0j), (2+0j), (3+0j)], [(4+0j), (5+0j), (6+0j)]]    
    assert QR.conjugate_transpose(test_matrix_04) == [[(7+0j), (8+0j)], [(9+0j), (10+0j)], [(11+0j), (12+0j)]]
    
def test_matrix_identity():
    assert QR.matrix_identity(3) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
    assert QR.matrix_identity(4) == [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]
    
def test_sign():
    assert QR.sign(-6.8) == -1
    assert QR.sign(3) == 1
    
def test_vector_vector_multi():
    assert QR.vector_vector_multi(test_vector_01, test_vector_02) == [[3, 1, 2], [6, 2, 4], [12, 4, 8]]
    assert QR.vector_vector_multi(test_vector_03, test_vector_04) == [[20, 12, 8], [10, 6, 4], [5, 3, 2]]
    
def test_HH_V():
    assert QR.HH_V(test_vector_01) == [5.58257569495584, 2.0, 4.0]
    assert QR.HH_V(test_vector_02) == [6.741657386773941, 1.0, 2.0]
    
def test_HH_F():
    assert QR.HH_F(test_vector_01) == [[0.9047619047619048, -0.19047619047619047, -0.38095238095238093], [-0.19047619047619047, 0.6190476190476191, -0.7619047619047619], [-0.38095238095238093, -0.7619047619047619, -0.5238095238095237]]
    assert QR.HH_F(test_vector_02) == [[-0.2857142857142856, -0.42857142857142855, -0.8571428571428571], [-0.42857142857142855, 0.8571428571428572, -0.2857142857142857],[-0.8571428571428571, -0.2857142857142857, 0.4285714285714286]]
    
def test_HH_Q():
    assert QR.HH_Q(test_matrix_01, test_scalar_01) == [[1, 0, 0], [0, 1, 0], [0, 0, -1.0]]
    assert QR.HH_Q(test_matrix_02, test_scalar_02) == [[1, 0, 0], [0, -0.8574929257125445, -0.5144957554275267], [0, -0.5144957554275267, 0.8574929257125441]]
    
def test_HH():
    assert QR.HH(test_matrix_01) == [[[(-0.12309149097933281+0j),(-0.4923659639173309+0j),(-0.8616404368553291+0j)],[(0.9045340337332909+0j), (0.3015113445777641+0j), (-0.3015113445777639+0j)],[(-0.4082482904638638+0j),(0.8164965809277259+0j),(-0.40824829046386285+0j)]],
                                     [[-8.12403840463596, -4.84284661198823e-16, 3.998735044211448e-16],[-9.601136296387953, 0.9045340337332908, -1.249000902703301e-16],[-11.078234188139946, 1.8090680674665809, -1.6653345369377348e-15]]]
    assert QR.HH(test_matrix_02) == [[[(-0.2672612419124245+0j),(-0.8017837257372733+0j),(-0.5345224838248489+0j)],[(0.9434563530497266+0j),(-0.10482848367219175+0j),(-0.3144854510165752+0j)],[(-0.19611613513818388+0j),(0.588348405414552+0j),(-0.7844645405527362+0j)]],
                                     [[-3.7416573867739427, 9.42028585811438e-16, -7.117716469520488e-18],[-6.414269805898186, 1.362770287738495, 1.1102230246251565e-16],[-8.285098499285159, -0.10482848367219, 0.5883484054145516]]]